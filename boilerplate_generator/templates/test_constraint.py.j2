import os

from pytest import mark
from pytest_bdd\
    import scenario, given, when, then, parsers


from {{ project.snakename }}.tests.factory\
    import Factory

from {{ project.snakename }}.src.utils.container\
    import Container


STORAGE_ENGINE = "INMEMORY"
__fullpath = os.path.dirname(os.path.abspath(__file__))


@mark.order()
@scenario(f"{__fullpath.split('/{{ project.name }}/')[0]}"
          "/{{ project.name }}/{{ project.snakename }}"
          "/constraints/{% if constraint.type_ != "core" %}{{ constraint.type_ }}{% else %}{{ project.snakename}}{% endif %}/{{ constraint.snakename }}.constraint",
          "{{ constraint.scenario }}")
def test_{{ constraint.snakename }}():
    pass


@given(parsers.parse("{{ constraint.given | replace('<', '{') | replace('>','}') }}"), target_fixture="context")
def given_{{ constraint.snakename }}({% for param in constraint.given.split('<')[1:] %}{{ param.split('>')[0] }}{% if not loop.last %}, {% endif %}{% endfor %}):
    input_contract = InputPortBuilder()\
        .create()\
        {% for param in constraint.given.split('<')[1:] %}
        .with_{{ param.split('>')[0] }}({{ param.split('>')[0] }})\
        {% endfor %}
        .build()

    return {
        {% for param in constraint.given.split('<')[1:] %}
        "{{ param.split('>')[0] }}": {{ param.split('>')[0] }},
        {% endfor %}
        "input_contract": input_contract
    }


@when(parsers.parse("{{ constraint.when | replace('<', '{') | replace('>','}') }}"))
def when_{{ constraint.snakename }}(context, {% for param in constraint.when.split('<')[1:] %}{{ param.split('>')[0] }}{% if not loop.last %}, {% endif %}{% endfor %}):
    usecase = Container.get_usecase_repo("", STORAGE_ENGINE)
    output_contract = usecase.execute(context["input_contract"])
    context["output_contract"] = output_contract


@then(parsers.parse("{{ constraint.then | replace('<', '{') | replace('>','}') }}"))
def then_{{ constraint.snakename }}(context, {% for param in constraint.then.split('<')[1:] %}{{ param.split('>')[0] }}{% if not loop.last %}, {% endif %}{% endfor %}):
    {% for param in constraint.then.split('<')[1:] %}
    assert context["output_contract"]\
        .{{ param.split('>')[0] }} == {{ param.split('>')[0] }}
    {% endfor %}
